name: CI/CD Pipeline - ML Trading Dashboard

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  # ============================================================================
  # CONTINUOUS INTEGRATION
  # ============================================================================
  
  code-quality:
    name: üîç Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort bandit safety
          
      - name: Code formatting check (Black)
        run: black --check --diff src/ tests/
        
      - name: Import sorting check (isort)
        run: isort --check-only --diff src/ tests/
        
      - name: Linting (Flake8)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
      - name: Security scan (Bandit)
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Dependency vulnerability scan (Safety)
        run: safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-html
          
      - name: Run unit tests with coverage
        run: |
          pytest tests/test_callback_regression.py \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --html=pytest-report.html \
            --self-contained-html \
            -v
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-${{ matrix.python-version }}
          path: |
            pytest-report.html
            htmlcov/

  regression-tests:
    name: üîÑ Regression Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mltrading_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Setup Chrome for Selenium
        uses: browser-actions/setup-chrome@latest
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest dash[testing] selenium webdriver-manager
          
      - name: Setup test database
        run: |
          # Add database setup commands here
          echo "Setting up test database..."
          
      - name: Run regression tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mltrading_test
          DASH_TESTING: true
        run: |
          pytest tests/test_dashboard_regression.py \
            -v \
            --html=regression-report.html \
            --self-contained-html \
            --tb=short
            
      - name: Upload regression test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: regression-test-reports
          path: regression-report.html

  build-app:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Build application package
        run: |
          python -m pip install --upgrade pip build
          python -m build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # ============================================================================
  # CONTINUOUS DEPLOYMENT - STAGING
  # ============================================================================
  
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [regression-tests, build-app]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://mltrading-staging.herokuapp.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
          
      - name: Deploy to Heroku Staging
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: mltrading-staging
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          
      - name: Wait for deployment
        run: sleep 30
        
      - name: Staging health check
        run: |
          curl -f https://mltrading-staging.herokuapp.com/health || exit 1
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Staging deployment completed: https://mltrading-staging.herokuapp.com"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  staging-integration-tests:
    name: üß™ Staging Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install test dependencies
        run: |
          pip install pytest requests selenium webdriver-manager
          
      - name: Run integration tests against staging
        env:
          STAGING_URL: https://mltrading-staging.herokuapp.com
        run: |
          pytest tests/integration/ \
            --base-url=$STAGING_URL \
            -v \
            --html=integration-report.html
            
      - name: Upload integration test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-reports
          path: integration-report.html

  # ============================================================================
  # CONTINUOUS DEPLOYMENT - PRODUCTION
  # ============================================================================
  
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: staging-integration-tests
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://mltrading.herokuapp.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
          
      - name: Create deployment
        uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://mltrading.herokuapp.com
          environment: production
          
      - name: Deploy to Heroku Production
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: mltrading-prod
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          
      - name: Production health check
        run: |
          sleep 60  # Wait for deployment to stabilize
          curl -f https://mltrading.herokuapp.com/health || exit 1
          
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://mltrading.herokuapp.com
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://mltrading.herokuapp.com
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Production deployment completed: https://mltrading.herokuapp.com"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================================================
  # POST-DEPLOYMENT MONITORING
  # ============================================================================
  
  production-smoke-tests:
    name: üî• Production Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install test dependencies
        run: |
          pip install pytest requests
          
      - name: Run production smoke tests
        env:
          PRODUCTION_URL: https://mltrading.herokuapp.com
        run: |
          pytest tests/smoke/ \
            --base-url=$PRODUCTION_URL \
            -v \
            --tb=short
            
      - name: Performance monitoring
        run: |
          # Basic performance check
          time curl -f https://mltrading.herokuapp.com/
          
      - name: Create GitHub issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Production Smoke Tests Failed',
              body: 'Production smoke tests failed after deployment. Please investigate immediately.',
              labels: ['bug', 'production', 'urgent']
            })